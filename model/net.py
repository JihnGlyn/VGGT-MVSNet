from vggt.models.vggt import VGGT
from vggt.utils.pose_enc import pose_encoding_to_extri_intri

from model.mvs import *


def run_VGGT(model, images, dtype):
    # images: [B, 3, H, W]
    # hard-coded to use 518 for VGGT
    # images = F.interpolate(images, size=(resolution, resolution), mode="bilinear", align_corners=False)

    with torch.no_grad():
        with torch.cuda.amp.autocast(dtype=dtype):
            # images = images[None]  # add batch dimension
            aggregated_tokens_list, ps_idx = model.aggregator(images)

        # Predict Cameras
        pose_enc = model.camera_head(aggregated_tokens_list)[-1]
        # Extrinsic and intrinsic matrices, following OpenCV convention (camera from world)
        extrinsic, intrinsic = pose_encoding_to_extri_intri(pose_enc, images.shape[-2:])
        # Predict Depth Maps
        depth_map, depth_conf, feature = model.depth_head(aggregated_tokens_list, images, ps_idx)

    # extrinsic[B,N,3,4]->[B,N,4,4]
    B, N, _, _ = extrinsic.shape
    last_row = torch.tensor([0, 0, 0, 1], dtype=extrinsic.dtype, device=extrinsic.device).expand(B, N, 1, 4)
    extrinsic = torch.cat((extrinsic, last_row), dim=2)

    # extrinsic[B,N,4,4] intrinsic[B,N,3,3] depth[B,N,H,W] conf[B,N,H,W] feature[B,N,32,H,W]
    return extrinsic, intrinsic, depth_map.squeeze(-1), depth_conf, feature


def postprocess_cams(intrinsic, extrinsic, scale: float = 2.0):
    """
    process camera extrinsic and intrinsic generated by VGGT
    :param intrinsic: [B,N,3,3]
    :param extrinsic: [B,N,4,4]
    :param scale: scalar
    :return: proj: [B,N,4,4]
    """
    up_intri = intrinsic.clone()
    up_intri[:, :, :2] *= scale
    proj = extrinsic.clone()
    proj[:, :, :3, :4] = torch.matmul(up_intri, extrinsic[:, :, :3, :4])
    return proj


def output_cams_loss(intrinsic, extrinsic):
    """

    Args:
        intrinsic: low-res intrinsic generated by VGGT [B,N,3,3]
        extrinsic: low-res extrinsic generated by VGGT [B,N,4,4]

    Returns:
        mid-res & high-res cams: [[B,N,2,4,4], [B,N,2,4,4]]
    """
    B, N, H, W = extrinsic.shape
    cam_mat1 = torch.zeros(B, N, 2, H, W)
    cam_mat1 = cam_mat1.to(device=extrinsic.device)
    cam_mat1[:, :, 0, :4, :4] = extrinsic
    cam_mat1[:, :, 1, :3, :3] = intrinsic  # low-res
    cam_mat2 = cam_mat1.clone()
    cam_mat2[:, :, 1, :2, :] = cam_mat2[:, :, 1, :2, :] * 2  # mid-res
    cam_mat3 = cam_mat2.clone()
    cam_mat3[:, :, 1, :2, :] = cam_mat3[:, :, 1, :2, :] * 2  # high-res
    return {"level_l": cam_mat1, "level_m": cam_mat2, "level_h": cam_mat3}


def extract_depth_range(depth, conf, threshold=0.1, widen_threshold=0.2):
    """

    :param depth: [B, N, H, W]
    :param conf: [B, N, H, W]
    :param threshold:
    :param widen_threshold:
    :return: [B] [B] [B, 1, H, W]
    """
    B, N, H, W = conf.shape
    reshaped_conf = conf.view(B * N, H, W)
    normalized_list = []
    for i in range(B * N):
        sub_conf = reshaped_conf[i]
        min_val = sub_conf.min()
        max_val = sub_conf.max()
        range_val = max_val - min_val
        if range_val == 0:
            range_val = 1e-8
        sub_conf_normalized = (sub_conf - min_val) / range_val
        normalized_list.append(sub_conf_normalized.unsqueeze(0))
    normalized_reshaped = torch.cat(normalized_list, dim=0)
    conf_norm = normalized_reshaped.view(B, N, H, W)

    mask = conf_norm > threshold
    depth_masked = torch.where(mask, depth, torch.tensor(float('-inf'), dtype=depth.dtype, device=depth.device))
    max_depths = torch.max(depth_masked.view(depth.shape[0], -1), dim=1)[0]

    depth_masked = torch.where(mask, depth, torch.tensor(float('inf'), dtype=depth.dtype, device=depth.device))
    min_depths = torch.min(depth_masked.view(depth.shape[0], -1), dim=1)[0]

    max_depths = torch.where(torch.isinf(max_depths), torch.tensor(0, dtype=depth.dtype, device=depth.device),
                             max_depths)
    min_depths = torch.where(torch.isinf(min_depths), torch.tensor(0, dtype=depth.dtype, device=depth.device),
                             min_depths)

    depth_ranges = max_depths - min_depths
    max_depths += (depth_ranges * widen_threshold)
    min_depths -= (depth_ranges * widen_threshold).clamp(min=0.1)
    mask = mask[:, [0]].float()

    return max_depths, min_depths, mask


class VGGT4MVS(nn.Module):
    def __init__(self, G=None):
        super(VGGT4MVS, self).__init__()
        if G is None:
            G = [8, 8, 8]
        self.G = G
        self.mvs_lr = MVSNet(G[0])
        self.mvs_mr = MVSNet(G[1])
        self.mvs_hr = MVSNet(G[2])
        # self.feature_fusion = FeatureFuse(base_channels=16)
        self.fpn = FeatureNet(8)
        # self.refinement = RefineNet(base_channels=8)

    def forward(self, model, imgs, num_depths, depth_interal_ratio, iteration, pair=None, dtype=torch.float32):
        # [N] imgs -> [1] ref + [N-1] srcs
        imgs_coarse = imgs["level_2"]
        imgs_mid = imgs["level_1"]
        imgs_hr = imgs["level_0"]
        # del imgs
        view_weights = None
        output_depths = []

        # Step 1. Coarse Outputs: VGGT(frozen) -> depth/confidence/intrinsic/extrinsic/features (low-res)
        extrinsic, intrinsic, vggt_depths, vggt_confs, fea_vggt = run_VGGT(model, imgs_coarse, dtype=dtype)

        depth_max, depth_min, mask = extract_depth_range(vggt_depths, vggt_confs, threshold=0.08, widen_threshold=0.1)
        # print("min:", depth_min[0], "max:", depth_max[0], 'vggt_min:', vggt_depths.min(), 'vggt_max:', vggt_depths.max())

        output_mask = {
            "level_l": mask,
            "level_m": F.interpolate(mask, scale_factor=2.0, mode='nearest'),
            "level_h": F.interpolate(mask, scale_factor=4.0, mode='nearest')
        }

        # Step 2. VGGT to MVS: condition intrinsic/extrinsic -> proj
        proj_matrices_lr = postprocess_cams(intrinsic, extrinsic, 1)
        proj_matrices_mr = postprocess_cams(intrinsic, extrinsic, 2)
        proj_matrices_hr = postprocess_cams(intrinsic, extrinsic, 4)
        proj_mats_lr = torch.unbind(proj_matrices_lr, dim=1)
        proj_mats_mr = torch.unbind(proj_matrices_mr, dim=1)
        proj_mats_hr = torch.unbind(proj_matrices_hr, dim=1)
        # output_projs = {"level_l": proj_mats_lr, "level_m": proj_mats_mr, "level_h": proj_mats_hr}
        output_projs = output_cams_loss(intrinsic, extrinsic)

        # Step 3. Process Feature: feature_lr: (N)[B,16,H/4,W/4] feature_mr: (N)[B,16,H/2,W/2]
        N = extrinsic.shape[1]
        features_lr, features_mr, features_hr = [], [], []
        for nview_idx in range(N):
            img = imgs_hr[:, nview_idx]
            output_feature = self.fpn(img)
            features_lr.append(output_feature["level_l"])
            features_mr.append(output_feature["level_m"])
            features_hr.append(output_feature["level_h"])

        # Step 4. Combine ref and src views with pair file then process MVSNet
        if pair is not None:  # EVALUATION MODE
            _, nviews, _ = pair.shape
            pair_unbind = torch.unbind(pair, dim=1)
            infer_depths, infer_confs = [], []
            for i in range(nviews):
                # TODO: LOW-RES MVS
                ref_proj = proj_mats_lr[i]
                src_projs = [proj_mats_lr[j] for j in pair_unbind[i].squeeze(0)]
                ref_fea = features_lr[i]
                src_feas = [features_lr[j] for j in pair_unbind[i].squeeze(0)]

                depth_hypo = vggt_depths[:, i].squeeze(1)  # [B,1,H,W] -> [B,H,W]
                depth_hypos = get_cur_depth_range_samples(depth_hypo, 48, 1,
                                                          depth_min, depth_max, True)
                mvsnet_outputs = self.mvs_lr(ref_fea, src_feas, ref_proj, src_projs, depth_hypos, view_weights)

                view_weights, depth_hypo = mvsnet_outputs["view_weights"], mvsnet_outputs["depth"]
                # infer_depths.append(depth_hypo)

                # TODO: MID-RES MVS
                ref_proj = proj_mats_mr[i]
                src_projs = [proj_mats_mr[j] for j in pair_unbind[i].squeeze(0)]
                ref_fea = features_mr[i]
                src_feas = [features_mr[j] for j in pair_unbind[i].squeeze(0)]

                depth_hypo = F.interpolate(depth_hypo.unsqueeze(1), scale_factor=2.0, mode='bilinear', align_corners=False)  # [B,1,H,W] -> [B,H,W]
                depth_hypos = get_cur_depth_range_samples(depth_hypo.squeeze(1), num_depths, depth_interal_ratio,
                                                          depth_min, depth_max, False)

                view_weights = F.interpolate(view_weights, scale_factor=2.0, mode='bilinear', align_corners=False)
                mvsnet_outputs = self.mvs_mr(ref_fea, src_feas, ref_proj, src_projs, depth_hypos, view_weights)

                depth_hypo = mvsnet_outputs["depth"]
                # infer_depths.append(depth_hypo)

                # TODO: HIGH-RES REFINE
                ref_proj = proj_mats_hr[i]
                src_projs = [proj_mats_hr[j] for j in pair_unbind[i].squeeze(0)]
                ref_fea = features_hr[i]
                src_feas = [features_hr[j] for j in pair_unbind[i].squeeze(0)]

                depth_hypo = F.interpolate(depth_hypo.unsqueeze(1), scale_factor=2.0, mode='bilinear',
                                           align_corners=False)  # [B,1,H,W] -> [B,H,W]
                depth_hypos = get_cur_depth_range_samples(depth_hypo.squeeze(1), num_depths, depth_interal_ratio,
                                                          depth_min, depth_max, False)

                view_weights = F.interpolate(view_weights, scale_factor=2.0, mode='bilinear', align_corners=False)
                mvsnet_outputs = self.mvs_hr(ref_fea, src_feas, ref_proj, src_projs, depth_hypos, view_weights)

                depth_hypo = mvsnet_outputs["depth"]
                infer_depths.append(depth_hypo)

            # TODO: USING VGGT CONFIDENCE, MAYBE PHOTOMETRIC CONFIDENCE BETTER?
            infer_confs = F.interpolate(vggt_confs, scale_factor=4.0, mode='bilinear', align_corners=False)
            infer_confs = torch.unbind(infer_confs, dim=1)
            out_intr = intrinsic[:, :, :2] * 4
            # List(N)*[B,1,H,W] List(N)*[B,1,H,W] [B,N,3,3] [B,N,4,4]
            return infer_depths, infer_confs, out_intr, extrinsic

        else:  # TRAIN MODE
            # TODO: LOW-RES MVS
            ref_proj, src_projs = proj_mats_lr[0], proj_mats_lr[1:]
            ref_fea, src_feas = features_lr[0], features_lr[1:]

            depth_hypo = vggt_depths[:, 0].squeeze(1)  # [B,1,H,W] -> [B,H,W]
            depth_hypos = get_cur_depth_range_samples(depth_hypo, 16, 0.025,
                                                      depth_min, depth_max, False)
            mvsnet_outputs = self.mvs_lr(ref_fea, src_feas, ref_proj, src_projs, depth_hypos, view_weights)
            view_weights, depth_hypo = mvsnet_outputs["view_weights"], mvsnet_outputs["depth"]
            output_depths.append(depth_hypo.unsqueeze(1))

            # TODO: MID-RES MVS
            ref_proj, src_projs = proj_mats_mr[0], proj_mats_mr[1:]
            ref_fea, src_feas = features_mr[0], features_mr[1:]

            depth_sample = depth_hypo.detach()
            depth_hypo = F.interpolate(depth_sample.unsqueeze(1), scale_factor=2.0, mode='bilinear', align_corners=False)
            depth_hypos = get_cur_depth_range_samples(depth_hypo.squeeze(1), 8, 0.0125,
                                                      depth_min, depth_max, False)

            view_weights = F.interpolate(view_weights, scale_factor=2.0, mode='bilinear', align_corners=False)
            mvsnet_outputs = self.mvs_mr(ref_fea, src_feas, ref_proj, src_projs, depth_hypos, view_weights)

            depth_hypo = mvsnet_outputs["depth"]
            output_depths.append(depth_hypo.unsqueeze(1))

            # TODO: HIGH-RES REFINE
            ref_proj, src_projs = proj_mats_hr[0], proj_mats_hr[1:]
            ref_fea, src_feas = features_hr[0], features_hr[1:]

            depth_sample = depth_hypo.detach()
            depth_hypo = F.interpolate(depth_sample.unsqueeze(1), scale_factor=2.0, mode='bilinear',
                                       align_corners=False)
            depth_hypos = get_cur_depth_range_samples(depth_hypo.squeeze(1), 4, 0.005,
                                                      depth_min, depth_max, False)

            view_weights = F.interpolate(view_weights, scale_factor=2.0, mode='bilinear', align_corners=False)
            mvsnet_outputs = self.mvs_hr(ref_fea, src_feas, ref_proj, src_projs, depth_hypos, view_weights)

            depth_hypo = mvsnet_outputs["depth"]
            output_depths.append(depth_hypo.unsqueeze(1))

            output_depths.append(vggt_depths[:, 0].squeeze(1))
            # {depth:[[B,1,H/4,W/4], [B,1,H/2,W/2], [B,1,H,W]], output_projs:[[B,N,2,4,4],[B,N,2,4,4]]}
            return output_depths, output_projs, output_feature, output_mask

